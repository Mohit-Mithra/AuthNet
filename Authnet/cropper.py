# -*- coding: utf-8 -*-
"""Cropper.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gT3mGkO4wyoeFlhL9TjOf4gRF8IMNkgB
"""

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
from PIL import Image
import cv2
import matplotlib.pyplot as plt
import numpy as np
import os

"""cascade_file_src = "C:\\Users\\Om\\Desktop\\Cerberus\\Utilities\\haarcascade_frontalface_default.xml"
faceCascade = cv2.CascadeClassifier(cascade_file_src)

### Face Extraction model
"""

#Function to pad, remove and crop images to face.
#Cropper(path,person):
#path: variable that stores path to photos
#person: variable that stores the person number **not a string value**
def Cropper(path,person):
        
    timesteps = 20 # optimum number of images chosen to 20
    inpDir=path #Cerberus/photos
    linpDir = os.listdir(inpDir) #list all directories in dataset
    personStr= linpDir[person]
    sampleFolder = '%s\\%s' % (inpDir,personStr) #opening sample folder
    lsampleFolder = os.listdir(sampleFolder)
    for sample in lsampleFolder:
        utterFolder = '%s\\%s' % (sampleFolder,sample) #opening each utterance
        lutterFolder = os.listdir(utterFolder)
        for utterances in lutterFolder:
            utterNumber= '%s\\%s' % (utterFolder,utterances)
            lutterNumber= os.listdir(utterNumber) #listing all images
            no_padding= timesteps - len(lutterNumber) #getting the number of images that is extra/deficit than optimum
            if no_padding>0 : #condition to pad images with plain white JPEG file
                for i in range(no_padding):
                    i = i + 1
                    white_colorFolder='%s\\white%d.jpg' % (utterNumber,i+1)
                    img  = Image.open('C:\\Users\\Cerberus\\Utilities\\white.jpg.jpg') 
                    img.save(white_colorFolder)
            
            else: #condition to remove images if exceeding timesteps
                for j in range(abs(no_padding)):
                    j = j + 20
                    colorFolder ='%s\\image%d.jpg' % (utterNumber,j + 1)
                    os.remove(colorFolder)
    
           for frame in lutterNumber:
               image= "%s\\%s" % (utterNumber,frame)
        #load image on gray scale :
               im = cv2.imread(image)
               gray = cv2.cvtColor(im, cv2.COLOR_BGR2GRAY)
        #detect faces in the image :
               faces = faceCascade.detectMultiScale(gray, 1.1, 5)
        #draw rectangles around the faces :
               for (x, y, w, h) in faces:
                   cv2.rectangle(im, (x, y), (x+w, y+h), (0, 255, 0), 2)
                   photo= Image.open(image)
                   (x, y, w, h) = faces[0]
                   center_x = x+w/2
                   center_y = y+h/2
                   b_dim = min(max(w,h)*1.2,photo.width, photo.height) 
         #box = (x, y, x+w, y+h)
                   box = (center_x-b_dim/2, center_y-b_dim/2, center_x+b_dim/2, center_y+b_dim/2)
               # Crop Image
                   crpim = photo.crop(box).resize((224,224))
                  crpim.save(image) 
    return 0
